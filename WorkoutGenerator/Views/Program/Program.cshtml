@using Microsoft.AspNetCore.Identity
@using WorkoutGenerator.Data
@using WorkoutGenerator.Extentions
@model ProgramViewModel
@inject SignInManager<ApplicationUser> SignInManager

<style>
    .workout-tabs .nav-tabs .nav-link.active { border-color: #40E0D0 #40E0D0 #fff; }

    .workout-tabs .nav-tabs { border-bottom: 1px solid #40E0D0; }

    .disabled {
        cursor: none;
        pointer-events: none;
        border: 1px solid gray;
        color: gray;
        opacity: 0.4 !important;
    }
</style>
<div class="container my-5" id="#vueApp">
    <div class="row d-flex justify-content-center">
        <div class="col-12 col-lg-6  d-flex flex-column">
            <div class="">
                <div class="d-flex">
                    <p class="font-weight-bold">
                        Program Type:
                        <span class="color-second font-weight-bold ml-2">@Model.TemplateViewModel.TemplateType.Description()</span>
                    </p>
                </div>
                <label class="font-weight-bold">Instructions:</label>
                <p>Workout should be done @Model.TemplateViewModel.DaysType.Description(). This program's difficulty is <span class="color-second font-weight-bold">@Model.TemplateViewModel.TrainerLevelType</span> </p>
            </div>
            @{

                if (!SignInManager.IsSignedIn(User))
                {
                    <div class="card p-3 text-white bg-main my-4 text-center">
                        <p>
                            Shall we save your workout?
                        </p>
                        <div>
                            <button data-toggle="modal" data-target="#registerAndSaveModal" class="btn bg-white color-main d-inline-block">Sign up to save this workout</button>
                        </div>
                    </div>
                    <div class="modal fade" tabindex="-1" role="dialog" id="registerAndSaveModal">

                        <partial name="Register/_RegisterPartial" model="@new RegisterViewModel(){ReturnUrl = @Url.Action("SaveProgramToUser", "Program", new {created = @Model.Created}) }"/>

                    </div>
                }
                else if (Model.ApplicationIdNull)
                {
                    <form class="center-div" asp-controller="Program" asp-action="SaveProgramToUser" asp-route-created="@Model.Created">
                        <div class="card p-3 my-3 d-inline-block text-center">
                            <p>Like this program? Don't lose it by saving it to yourself.</p>
                            <button type="submit" class="btn bg-main text-white">Save Workout</button>

                        </div>
                    </form>
                }
            }
            <div class="workout-tabs my-3 center-div flex-column">
                <ul class="nav nav-tabs" id="myTab" role="tablist">

                    <li class="nav-item">
                        <a style="cursor: pointer;" class="nav-link color-second" id="tabAll" data-toggle="tab" href="#" role="tab" aria-controls="home" aria-selected="true">All</a>
                    </li>

                    @{
                        if (Model.TemplateViewModel.Workouts.Count > 1)
                        {
                            @foreach (var item in Model.TemplateViewModel.Workouts)
                            {
                                <li class="nav-item ">
                                    <a style="cursor: pointer" class="nav-link color-second @(Model.TemplateViewModel.Workouts.First() == item ? "active" : "")" id="profile-tab" data-toggle="tab" data-target="#@($"workout{item.Name}")" role="tab" aria-controls="profile" aria-selected="false">@item.Name</a>
                                </li>
                            }
                        }
                    }

                </ul>
                <div class="tab-content" id="myTabContent">
                    @foreach (var workoutViewModel in Model.TemplateViewModel.Workouts)
                    {
                        <div class="tab-pane fade @(Model.TemplateViewModel.Workouts.First() == workoutViewModel ? "active show" : "")" role="tabpanel" id="@($"workout{@workoutViewModel.Name}")">

                            <div class="card mt-3">
                                <div class="card-header d-flex">

                                    <p class="flex-grow-1 d-flex  mb-0 v-align">Workout @workoutViewModel.Name</p>
                                    <button  class="prevProgressAjax btn second-outline-btn mr-2">Prev</button>
                                    <button  class=" nextProgressAjax btn second-outline-btn mr-2 disabled">Next</button>
                                    <button data-url="@Url.Action("ProgressPartialAjax", "Workout", new {workoutViewModel.Id})" class="progressAjax btn bg-second text-white">Progress</button>
                                </div>
                                <div id="@($"workout_history{@workoutViewModel.Name}")">
                                    <partial name="Program/_WorkoutHistoryPartial" model="@workoutViewModel.WorkoutHistoryViewModel"/>

                                </div>

                            </div>

                        </div>
                    }
                </div>
            </div>


        </div>

        <div class="d-flex justify-content-center col-12">
            <button id="scrollToTopBtn" class="btn bg-main text-white my-5">Scroll To Top</button>
        </div>
    </div>


</div>


<div class="modal fade" id="videoModal" tabindex="-1" role="dialog" aria-labelledby="videoModal" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            @*<button type="button" class="close btn-round btn-primary" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>*@
            <div class="embed-responsive embed-responsive-16by9">
                <iframe class="embed-responsive-item" src="" allowfullscreen></iframe>
            </div>
        </div>
    </div>
</div>

@section Scripts{

    <script src="~/lib/vuejs/vue.js"></script>
    <script src="~/lib/modal-video/modal-video.js"></script>
    <script>
        $(function() {

            var vue = new Vue({
                el: '#vueApp',
                data: {
                },
                methods: {
                }
            });
            $('#tabAll').on('click',
                function() {
                    $('#tabAll').parent().addClass('active');
                    $('.tab-pane').addClass('active show');
                    $('[data-toggle="tab"]').parent().removeClass('active');
                });

            $(".nav-link").not("#tabAll").on("click",
                function() {
                    $(".tab-pane").not(this.hash).removeClass("active").removeClass("show");
                });

            $("#scrollToTopBtn").on('click',
                function() {
                    $('html,body').animate({ scrollTop: 0 }, 'slow');
                });

            $('.videoModalTriger').on('click',
                function() {
                    var theModal = $(this).data("target");
                    var videoSRC = $(this).attr("data-videoModal");
                    var videoSRCauto = videoSRC + "?autoplay=1";
                    $(theModal + ' iframe').attr('src', videoSRCauto);
                    $(theModal).on('hidden.bs.modal',
                        function(e) {
                            $(theModal + ' iframe').attr('src', '');
                        });
                });
            $('.progressAjax').on('click',
                function() {
                    var url = $(this).data('url');
                    $.ajax({
                        url: url,
                        type: 'POST',
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        },
                        processData: true,
                        contentType: "application/json; charset=utf-8",
                        success: function(data) {
                            $('#workout_history' + data.name).html(data.partial.result);
                        }.bind(this),
                        error: function(XMLHttpRequest, textStatus, errorThrown) {
                            alert('fuck');
                        }
                    });
                });

            $('.prevProgressAjax').on('click',
                function() {
                    $.ajax({
                        url: "@Url.Action("WorkoutHistoryAjax","Workout")",
                        type: 'POST',
                        data: {
                            workoutHistoryId:$(this).data('currentPosition')
                        },
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        },
                        processData: true,
                        contentType: "application/json; charset=utf-8",
                        success: function(data) {
                            $('#workout_history' + data.name).html(data.partial.result);
                        },
                        error: function(XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                });

            $('.nextProgressAjax').on('click',
                function() {
                    $.ajax({
                        url: "@Url.Action("WorkoutHistoryAjax","Workout")",
                        type: 'POST',
                        data: {
                            workoutHistoryId:$(this).data('currentPosition')
                        },
                        headers: {
                            RequestVerificationToken: $('input:hidden[name="__RequestVerificationToken"]').val()
                        },
                        processData: true,
                        contentType: "application/json; charset=utf-8",
                        success: function(data) {
                            $('#workout_history' + data.name).html(data.partial.result);
                        }.bind(this),
                        error: function(XMLHttpRequest, textStatus, errorThrown) {
                        }
                    });
                });
        });
    </script>
}